kind: Service
apiVersion: v1
metadata:
  name: mongodb
  namespace: art-access-pre-release
spec:
  clusterIP: None
  ports:
    - port: 27017
  selector:
    app: mongodb

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongodb-node
  namespace: art-access-pre-release
spec:
  serviceName: mongodb
  selector:
    matchLabels:
      app: mongodb
  replicas: 1
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      containers:
        - name: mongodb-node
          image: mongo:3.6
          command: ["/usr/bin/mongod", "--smallfiles", "--bind_ip_all"]
          volumeMounts:
            - mountPath: "/data/db"
              name: mongo-data
          ports:
            - containerPort: 27017

  volumeClaimTemplates:
    - metadata:
        name: mongo-data
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 1Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ac-server
  namespace: art-access-pre-release
  labels:
    app: ac-server

spec:
  selector:
    matchLabels:
      app: ac-server
  replicas: 1
  template:
    metadata:
      labels:
        app: ac-server
    spec:
      imagePullSecrets:
        - name: art-access-secret

      containers:
        - name: ac-server
          image: newearthcb.azurecr.io/ac-server:__TAG__SERVER

          env:
            - name: mongo__connectionString
              value: "mongodb://mongodb?connect=direct"

            - name: rabbitmq__host
              value: "rabbitmq"

            - name: stripe__onBoardingReturn
              value: "https://artist-artaccess-pr.staging.newearthart.tech/stripe"

            - name: stripe__applePayDomain
              value: "artist-artaccess-pr.staging.newearthart.tech"



---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ac-frontend-artist
  namespace: art-access-pre-release
  labels:
    app: ac-frontend-artist

spec:
  selector:
    matchLabels:
      app: ac-frontend-artist
  replicas: 1
  template:
    metadata:
      labels:
        app: ac-frontend-artist
    spec:
      imagePullSecrets:
        - name: art-access-secret

      containers:
        - name: ac-frontend-artist
          image: newearthcb.azurecr.io/ac-frontend-artist:__TAG__FRONTEND-ARTIST


---
apiVersion: v1
kind: Service
metadata:
  name: ac-server
  namespace: art-access-pre-release
spec:
  ports:
    - name: http
      port: 80
  selector:
    app: ac-server

---
apiVersion: v1
kind: Service
metadata:
  name: ac-frontend-artist
  namespace: art-access-pre-release
spec:
  ports:
    - name: http
      port: 3000
  selector:
    app: ac-frontend-artist


---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: acartist-pr-ingress
  namespace: art-access-pre-release
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-nginx"
    nginx.ingress.kubernetes.io/from-to-www-redirect: "true"
spec:
  tls:
    - hosts:
        - artist-artaccess-pr.staging.newearthart.tech
      secretName: acartist-tls-pr

  rules:
    - host: artist-artaccess-pr.staging.newearthart.tech
      http:
        paths:
          - pathType: Prefix
            path: "/"
            backend:
              service:
                name: ac-frontend-artist
                port:
                  number: 3000

          - pathType: Prefix
            path: "/api"
            backend:
              service:
                name: ac-server
                port:
                  number: 80

---

apiVersion: v1
kind: Service
metadata:
    name: rabbitmq
    namespace: art-access-pre-release
spec:
    ports:
    -   name: amqp 
        port: 5672
        protocol: TCP
    selector:
        app: rabbitmq

---

apiVersion: apps/v1
kind: StatefulSet
metadata:
    name: rabbitmq
    namespace: art-access-pre-release
spec:
  serviceName: rabbitmq
  selector:
    matchLabels:
        app: rabbitmq
  replicas: 1
  template:
    metadata:
        labels:
            app: rabbitmq
    spec:
        containers:
        -   name: rabbitmq
            image: masstransit/rabbitmq
            volumeMounts:
            -   mountPath: "/var/lib/rabbitmq/mnesia/"
                name: mq-data

            ports:
            -   containerPort: 5672
            -   containerPort: 15672
            env:
            -   name: RABBITMQ_DEFAULT_USER
                value: "admin"
            -   name: RABBITMQ_DEFAULT_PASS
                value: "admin"

  
  volumeClaimTemplates:
  - metadata:
        name: mq-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 1Gi

